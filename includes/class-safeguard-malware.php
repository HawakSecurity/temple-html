<?php
class SafeGuard_Malware {
    private $malware_signatures = array();
    private $heuristic_rules = array();
    private $high_risk_functions = array();

    public function __construct() {
        $this->initialize_signatures();
        $this->initialize_heuristic_rules();

        if (get_option('safeguard_malware_scanning', 1)) {
            add_action('safeguard_scan_malware', array($this, 'scan_files'));

            if (!wp_next_scheduled('safeguard_scan_malware')) {
                wp_schedule_event(time(), 'daily', 'safeguard_scan_malware');
            }
        }
    }

    private function initialize_signatures() {
        // Obfuscation techniques
        $this->malware_signatures['obfuscation'] = array(
            'eval(base64_decode',
            'eval(gzinflate',
            'eval(str_rot13',
            'eval(gzuncompress',
            'eval($',
            'base64_decode(\'',
            'str_rot13(\'',
            'gzinflate(base64_decode',
            'gzuncompress(base64_decode',
            'eval(rawurldecode',
            'preg_replace.*\(\s*[\'"].*e[\'"]',
            '\$[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*\s*\(\$\w+\s*\[\s*\d+\s*\]\s*\)\s*',
            'chr\s*\(\s*\d+\s*\)\s*\.\s*chr\s*\(\s*\d+\s*\)',
            'function\s*\w+\s*\(\)\s*\{\s*eval\s*\(\s*\$_REQUEST\s*\[\s*[\'"][^\'"]+[\'"]\s*\]\s*\)\s*;\s*\}'
        );

        // Remote file operations
        $this->malware_signatures['remote_ops'] = array(
            '@include "\\',
            'file_get_contents(\'http://',
            'file_get_contents(\'https://',
            'curl_exec(',
            'fopen(\'http://',
            'fopen(\'https://',
            'wp_remote_get(\'http',
            'wp_remote_post(\'http',
            'fsockopen(\'',
            'pfsockopen(\'',
            'stream_socket_client',
            'socket_connect',
            'stream_context_create'
        );

        // System commands
        $this->malware_signatures['system_cmds'] = array(
            'passthru(',
            'shell_exec(',
            'system(',
            'proc_open(',
            'popen(',
            'curl_file_create(',
            'exec(',
            '`whoami`',
            '`pwd`',
            'pcntl_exec(',
            'proc_get_status',
            'proc_terminate',
            'posix_kill',
            'posix_mkfifo'
        );

        // Backdoor indicators
        $this->malware_signatures['backdoors'] = array(
            'backdoor',
            'FilesMan',
            'IndoXploit',
            'WSO_VERSION',
            'Web Shell',
            'r57shell',
            'c99shell',
            'shellbot',
            'phpshell',
            'void\.ru',
            'phpremoteview',
            'directmail\.',
            'PHPShell',
            'SECSHELL',
            'NSaaS',
            'Cyber Shell',
            'WebRoot'
        );

        // Email spamming
        $this->malware_signatures['spam'] = array(
            'mass_mail',
            'spam_mail',
            'bulk_mail',
            'auto_mail',
            'mass_mailing',
            'send_bulk',
            'mail_list',
            'mass_mailer',
            'bulk_sender',
            'newsletter_script',
            'mail_bomber'
        );

        // Database manipulation
        $this->malware_signatures['database'] = array(
            'DROP TABLE',
            'UPDATE.*SET.*WHERE',
            'INSERT INTO.*VALUES',
            'SELECT.*FROM.*WHERE',
            'UNION SELECT',
            'UNION ALL SELECT',
            'CONCAT\(.*SELECT',
            'INTO\s+OUTFILE',
            'INTO\s+DUMPFILE',
            'LOAD_FILE\s*\(',
            'BENCHMARK\s*\(',
            'SLEEP\s*\(',
            'WAITFOR\s+DELAY'
        );

        // File upload vulnerabilities
        $this->malware_signatures['upload'] = array(
            'move_uploaded_file',
            'wp_handle_upload',
            'upload_tmp_dir',
            'tmp_name',
            'type=image\/',
            '\$_FILES',
            'copy\s*\(\s*\$_FILES',
            'fwrite\s*\(\s*\$handle\s*,\s*\$_FILES',
            'file_put_contents\s*\(\s*\$\w+\s*,\s*\$_FILES'
        );

        // Cryptocurrency miners
        $this->malware_signatures['crypto_miners'] = array(
            'coinhive',
            'cryptonight',
            'minero\.cc',
            'coin-hive',
            'webmining',
            'deepMiner',
            'monerominer',
            'cryptoloot',
            'crypto-loot',
            'projectpoi',
            'wp-monero-miner-pro'
        );

        // SEO spam
        $this->malware_signatures['seo_spam'] = array(
            'viagra',
            'cialis',
            'levitra',
            'cheap\s+prescription',
            'online\s+pharmacy',
            'buy\s+online',
            'discount\s+drugs',
            'weight\s+loss',
            'diet\s+pills',
            'gambling',
            'casino\s+online'
        );
    }

    private function initialize_heuristic_rules() {
        $this->heuristic_rules = array(
            // Entropy analysis for obfuscated code
            'high_entropy' => array(
                'threshold' => 5.7,
                'score' => 5
            ),
            // Suspicious string concatenation
            'string_concat' => array(
                'pattern' => '/\$[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*\s*\.=\s*[\'"]\w+[\'"]/',
                'score' => 3
            ),
            // Variable function calls
            'var_functions' => array(
                'pattern' => '/\$[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*\s*\(/',
                'score' => 4
            ),
            // Hidden elements
            'hidden_elements' => array(
                'pattern' => '/style\s*=\s*[\'"]display\s*:\s*none[\'"]/',
                'score' => 2
            ),
            // Advanced obfuscation detection
            'advanced_obfuscation' => array(
                'pattern' => '/(\$\{.+?\}|\$[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*\[[^\]]+\])\s*\(/',
                'score' => 6
            ),
            // Suspicious file operations
            'file_ops' => array(
                'pattern' => '/fopen|fwrite|fputs|file_put_contents/',
                'score' => 3
            ),
            // Encoded strings
            'encoded_strings' => array(
                'pattern' => '/base64_decode|gzinflate|str_rot13|gzuncompress/',
                'score' => 4
            ),
            // Suspicious eval usage
            'eval_usage' => array(
                'pattern' => '/eval\s*\(.*\$.*\)/',
                'score' => 7
            )
        );

        $this->high_risk_functions = array(
            'eval' => 10,
            'assert' => 9,
            'preg_replace' => 8,
            'create_function' => 8,
            'include' => 7,
            'require' => 7,
            'include_once' => 7,
            'require_once' => 7,
            'call_user_func' => 6,
            'call_user_func_array' => 6,
            'system' => 10,
            'exec' => 10,
            'passthru' => 10,
            'shell_exec' => 10,
            'popen' => 9,
            'proc_open' => 9,
            'pcntl_exec' => 10,
            'mail' => 5,
            'mb_send_mail' => 5,
            'putenv' => 7,
            'ini_set' => 6,
            'chmod' => 8,
            'touch' => 6,
            'symlink' => 8,
            'unlink' => 7
        );
    }

    public function scan_files() {
        if (!is_admin()) {
            return;
        }

        $wp_root = ABSPATH;
        $suspicious_files = array();
        $total_score = 0;

        $this->recursive_scan($wp_root, $suspicious_files, $total_score);

        if (!empty($suspicious_files)) {
            $this->log_suspicious_files($suspicious_files);
            $this->notify_admin_malware($suspicious_files, $total_score);

            if ($total_score >= 20) {
                $this->quarantine_files($suspicious_files);
            }
        }
    }

    private function recursive_scan($dir, &$suspicious_files, &$total_score) {
        if (!is_readable($dir)) return;

        $files = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($dir, RecursiveDirectoryIterator::SKIP_DOTS)
        );

        foreach ($files as $file) {
            if (!$file->isFile()) continue;

            $ext = strtolower(pathinfo($file, PATHINFO_EXTENSION));
            if (in_array($ext, array('php', 'phtml', 'php3', 'php4', 'php5', 'phps'))) {
                $this->scan_file($file->getPathname(), $suspicious_files, $total_score);
            }
        }
    }

    private function scan_file($file_path, &$suspicious_files, &$total_score) {
        $content = file_get_contents($file_path);
        $file_score = 0;
        $detected_threats = array();

        // Check for known malware signatures
        foreach ($this->malware_signatures as $type => $signatures) {
            foreach ($signatures as $signature) {
                if (stripos($content, $signature) !== false) {
                    $file_score += 5;
                    $detected_threats[] = array(
                        'type' => $type,
                        'signature' => $signature
                    );
                }
            }
        }

        // Heuristic analysis
        $file_score += $this->perform_heuristic_analysis($content);

        // Check for high-risk functions
        foreach ($this->high_risk_functions as $function => $risk_score) {
            if (stripos($content, $function) !== false) {
                $file_score += $risk_score;
                $detected_threats[] = array(
                    'type' => 'high_risk_function',
                    'signature' => $function
                );
            }
        }

        if ($file_score > 0) {
            $suspicious_files[] = array(
                'path' => $file_path,
                'score' => $file_score,
                'threats' => $detected_threats,
                'size' => filesize($file_path),
                'modified' => filemtime($file_path)
            );
            $total_score += $file_score;
        }
    }

    private function perform_heuristic_analysis($content) {
        $score = 0;

        // Calculate entropy for obfuscation detection
        $entropy = $this->calculate_entropy($content);
        if ($entropy > $this->heuristic_rules['high_entropy']['threshold']) {
            $score += $this->heuristic_rules['high_entropy']['score'];
        }

        // Check other heuristic patterns
        foreach ($this->heuristic_rules as $rule => $data) {
            if (isset($data['pattern']) && preg_match($data['pattern'], $content)) {
                $score += $data['score'];
            }
        }

        return $score;
    }

    private function calculate_entropy($string) {
        $frequencies = array_count_values(str_split($string));
        $length = strlen($string);
        $entropy = 0;

        foreach ($frequencies as $count) {
            $probability = $count / $length;
            $entropy -= $probability * log($probability, 2);
        }

        return $entropy;
    }

    private function quarantine_files($suspicious_files) {
        $quarantine_dir = WP_CONTENT_DIR . '/safeguard-quarantine';
        if (!file_exists($quarantine_dir)) {
            mkdir($quarantine_dir, 0755, true);
        }

        foreach ($suspicious_files as $file) {
            if ($file['score'] >= 15) {
                $quarantine_path = $quarantine_dir . '/' . md5($file['path']) . '.quarantine';
                if (rename($file['path'], $quarantine_path)) {
                    $this->log_quarantine_action($file['path'], $quarantine_path);
                }
            }
        }
    }

    private function log_suspicious_files($suspicious_files) {
        global $wpdb;
        $table_name = $wpdb->prefix . 'safeguard_logs';

        foreach ($suspicious_files as $file) {
            $threat_details = '';
            foreach ($file['threats'] as $threat) {
                $threat_details .= sprintf(
                    "Type: %s, Signature: %s\n",
                    $threat['type'],
                    $threat['signature']
                );
            }

            $wpdb->insert(
                $table_name,
                array(
                    'event_type' => 'malware_detected',
                    'event_description' => sprintf(
                        "Malicious code detected in file:\nPath: %s\nThreat Score: %d\nThreats:\n%s",
                        $file['path'],
                        $file['score'],
                        $threat_details
                    ),
                    'severity_score' => min(10, ceil($file['score'] / 5)),
                    'created_at' => current_time('mysql')
                ),
                array('%s', '%s', '%d', '%s')
            );
        }
    }

    private function log_quarantine_action($original_path, $quarantine_path) {
        global $wpdb;
        $table_name = $wpdb->prefix . 'safeguard_logs';

        $wpdb->insert(
            $table_name,
            array(
                'event_type' => 'file_quarantined',
                'event_description' => sprintf(
                    "File quarantined for security:\nOriginal: %s\nQuarantine: %s",
                    $original_path,
                    $quarantine_path
                ),
                'severity_score' => 9,
                'created_at' => current_time('mysql')
            ),
            array('%s', '%s', '%d', '%s')
        );
    }

    private function notify_admin_malware($suspicious_files, $total_score) {
        $admin_email = get_option('admin_email');
        $subject = sprintf(
            'SafeGuardWP - %s: Malware Detection Alert',
            $total_score >= 20 ? 'CRITICAL' : 'WARNING'
        );

        $message = sprintf(
            "Malicious code has been detected in your WordPress installation.\n\n" .
            "Total Threat Score: %d\n\n" .
            "Affected Files:\n\n",
            $total_score
        );

        foreach ($suspicious_files as $file) {
            $message .= sprintf(
                "File: %s\n" .
                "Threat Score: %d\n" .
                "Detected Threats:\n",
                $file['path'],
                $file['score']
            );

            foreach ($file['threats'] as $threat) {
                $message .= sprintf(
                    "- %s: %s\n",
                    $threat['type'],
                    $threat['signature']
                );
            }

            $message .= "\n";
        }

        if ($total_score >= 20) {
            $message .= "CRITICAL: Due to the high threat level, suspicious files have been automatically quarantined.\n";
        }

        $message .= "\nPlease investigate these files immediately for potential security threats.";

        wp_mail($admin_email, $subject, $message);
    }
}